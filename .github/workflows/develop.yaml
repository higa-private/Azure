name: develop workflow test

on:
  push:
    branches: ["develop"]

env:
  ## 個別設定
  customer_name: "" # 顧名名、PJ名などKeyVault名に付与する

  ## 基盤要件
  resource_group_name: "rg-develop"
  backend_storage_account: "develop01"
  backend_container_name: "tfstate20250911"
  backend_key: "terraform.tfstate"
  key_vault: "terraform20250909"
  # AzureのKeyVaultから取得する秘密情報の名前リスト（customer_name + "_" + 以下の名前でKeyVaultに登録されている想定）
  key_vault_subscription: "subscription-id"
  key_vault_tenant: "tenant-id"
  key_vault_sp_id: "sp-client-id"
  key_vault_sp_secret: "sp-client-secret"
  # ツールバージョン
  tf_version: "1.5.4"
  node_version: "20.x"

jobs:
  Terraform_Exec:
    runs-on: [self-hosted, Linux]
    container:
      image: docker.io/library/ubuntu:noble-20250805 #24.04.3 LTS
    strategy:
      fail-fast: true
      max-parallel: 5
      matrix:
        tf_working_dir: # WFを実行するTerraformディレクトリを指定
          - develop
    steps:
      - uses: actions/checkout@v2 # リポジトリのコードをコンテナ上にチェックアウト（ダウンロード）

      - name: Setup OS # コンテナに必要なパッケージをインストール
        shell: bash
        run: |
          apt-get update && apt-get install -y ca-certificates                     # https通信で必要なので最初にインストール
          sed -i -e 's/http/https/' /etc/apt/sources.list.d/ubuntu.sources      # Ubuntuのパッケージリポジトリをhttpsに変更
          apt-get update && apt-get install -y vim curl unzip sudo jq git       # 必要なパッケージをインストール
          curl -sL https://aka.ms/InstallAzureCLIDeb | bash                       # 後続のWF処理でAzure CLIが必要なのでインストール

      - name: Setup Node.js
        uses: actions/setup-node@v3 # Node.jsのインストール
        with:
          node-version: ${{ env.node_version }} # Node.jsのバージョン指定

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1 # Terraformのインストール
        with:
          terraform_version: ${{ env.tf_version }} # Terraformのバージョン指定

      - name: Get Terraform Directory
        id: get_dir
        shell: bash # Shellをbashに指定しないと{}での境変数展開ができない （後続も同じ理由なので説明は割愛）
        run: |
          cd ${{ matrix.tf_working_dir }} 
          echo "tf_region_dir=$(pwd)" >> $GITHUB_OUTPUT

      - name: Terraform fmt # Terraformコードのフォーマットチェック
        run: terraform fmt -recursive

      - name: Azure Login # VMがあるAzureのKey Vaultから秘密情報を取得するためにAzureにログイン
        shell: bash
        run: |
          az login --identity

      - name: Create Terraform tfvars from Key Vault # Key Vaultから秘密情報を取得し、Terraformのprovider用変数ファイルを作成
        shell: bash
        run: |
          TFVARS_FILE=${{ matrix.tf_working_dir }}/credentials.auto.tfvars

          echo "provider_credentials = {" >> $TFVARS_FILE
          echo "subscription_id = \"$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_subscription }} --query value -o tsv)\"" >> $TFVARS_FILE
          echo "tenant_id = \"$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_tenant }} --query value -o tsv)\"" >> $TFVARS_FILE
          echo "sp_client_id = \"$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_sp_id }} --query value -o tsv)\"" >> $TFVARS_FILE
          echo "sp_client_secret = \"$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}{{ env.key_vault_sp_secret }} --query value -o tsv)\"" >> $TFVARS_FILE
          echo "}" >> $TFVARS_FILE

      - name: Export Key Vault secrets as environment variables
        shell: bash
        run: |
          echo "ARM_SUBSCRIPTION_ID=$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_subscription }} --query value -o tsv)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_tenant }} --query value -o tsv)" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_sp_id }} --query value -o tsv)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(az keyvault secret show --vault-name ${{ env.key_vault }} --name ${{ env.customer_name }}${{ env.key_vault_sp_secret }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Terraform Init
        shell: bash
        run: |
          cd ${{ matrix.tf_working_dir }}
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ env.resource_group_name }}" \
            -backend-config="storage_account_name=${{ env.backend_storage_account }}" \
            -backend-config="container_name=${{ env.backend_container_name }}" \
            -backend-config="key=${{ env.backend_key }}"
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Plan
        shell: bash
        run: |
          cd ${{ matrix.tf_working_dir }}
          terraform plan --parallelism=50 -no-color
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
